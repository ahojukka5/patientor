{"version":3,"sources":["types.ts","constants.ts","state/state.tsx","AddPatientModal/FormField.tsx","AddPatientModal/AddPatientForm.tsx","AddPatientModal/index.tsx","components/HealthRatingBar.tsx","PatientListPage/index.tsx","PatientDetailPage/Entries.tsx","AddPatientEntryModal/index.tsx","PatientDetailPage/index.tsx","App.tsx","index.tsx","state/reducer.ts"],"names":["Gender","HealthCheckRating","config","apiBaseUrl","initialState","patients","diagnoses","StateContext","createContext","useStateValue","useContext","addPatient","patient","type","payload","SelectField","name","label","options","Form","Field","as","className","map","option","key","value","TextField","field","placeholder","style","color","NumberField","min","max","DiagnosisSelection","setFieldValue","setFieldTouched","stateOptions","diagnosis","code","text","Dropdown","fluid","multiple","search","selection","onChange","_event","data","genderOptions","Male","Female","Other","AddPatientForm","onSubmit","onCancel","initialValues","ssn","dateOfBirth","occupation","gender","validate","values","errors","isValid","dirty","component","Grid","Column","floated","width","Button","onClick","disabled","AddPatientModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","inverted","HEALTHBAR_TEXTS","HealthRatingBar","rating","showText","Rating","icon","maxRating","PatientListPage","dispatch","history","useHistory","React","useState","setModalOpen","setError","closeModal","undefined","clickHandler","push","id","Container","textAlign","Table","celled","selectable","Row","HeaderCell","Body","Object","Cell","a","async","axios","post","constants","newPatient","console","response","HospitalEntryDetails","entry","log","diagstr","diagnosisCodes","join","Item","Icon","date","specialist","Description","description","discharge","criteria","OccupationalHealthcareEntryDetails","sickLeave","startDate","endDate","employerName","HealthCheckEntryDetails","healthCheckRating","EntryDetails","Error","JSON","stringify","assertNever","Entries","entries","Group","Divider","PureHealthCheckForm","PureHospitalForm","isDate","Boolean","Date","parse","validateHealthCheckForm","validateHospitalForm","HealthCheckForm","toISOString","slice","Healthy","HospitalForm","AddPatientEntryModalHealthCheck","AddPatientEntryModalHospital","GenderIcon","PatientDetailPage","useParams","modalHealthCheckOpen","setModalHealthCheckOpen","modalHospitalOpen","setModalHospitalOpen","Dimmer","active","Loader","uri","get","patientDetailsFromApi","fetchPatientDetails","submitNewPatientEntry","newEntry","App","useEffect","patientListFromApi","fetchPatientList","diagnosisListFromApi","fetchDiagnoses","Link","to","primary","hidden","path","ReactDOM","render","reducer","children","useReducer","state","Provider","action","reduce","memo","document","getElementById"],"mappings":"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","file":"static/js/main.229b68f5.chunk.js","sourcesContent":["export interface Diagnosis {\n  code: string;\n  name: string;\n  latin?: string;\n}\n\nexport enum Gender {\n  Male = 'male',\n  Female = 'female',\n  Other = 'other',\n}\n\nexport interface Patient {\n  id: string;\n  name: string;\n  occupation: string;\n  gender: Gender;\n  ssn?: string;\n  dateOfBirth?: string;\n  entries: Entry[];\n}\n\ninterface BaseEntry {\n  id: string;\n  description: string;\n  date: string;\n  specialist: string;\n  diagnosisCodes?: Array<Diagnosis['code']>;\n}\n\nexport interface HospitalEntry extends BaseEntry {\n  type: 'Hospital';\n  discharge: {\n    date: string;\n    criteria: string;\n  };\n}\n\nexport interface OccupationalHealthcareEntry extends BaseEntry {\n  type: 'OccupationalHealthcare';\n  employerName: string;\n  sickLeave: {\n    startDate: string;\n    endDate: string;\n  };\n}\n\nexport enum HealthCheckRating {\n  'Healthy' = 0,\n  'LowRisk' = 1,\n  'HighRisk' = 2,\n  'CriticalRisk' = 3,\n}\n\nexport interface HealthCheckEntry extends BaseEntry {\n  type: 'HealthCheck';\n  healthCheckRating: HealthCheckRating;\n}\n\nexport type Entry =\n  | HospitalEntry\n  | OccupationalHealthcareEntry\n  | HealthCheckEntry;\n\nexport type NewHospitalEntry = Omit<HospitalEntry, 'id'>;\n\nexport type NewOccupationalHealthcareEntry = Omit<OccupationalHealthcareEntry,'id'>;\n\nexport type NewHealthCheckEntry = Omit<HealthCheckEntry, 'id'>;\n\nexport type NewEntry =\n  | NewHospitalEntry\n  | NewOccupationalHealthcareEntry\n  | Omit<HealthCheckEntry, 'id'>;\n","declare const process: {\n  env: {\n    NODE_ENV: 'development' | 'production';\n  };\n};\n\nconst prod = {\n  apiBaseUrl: 'https://patientor-backend.ahojukka5.com/api',\n};\n\nconst dev = {\n  apiBaseUrl: 'http://localhost:3001/api',\n};\n\nconst config = process.env.NODE_ENV === 'development' ? dev : prod;\n\nexport default config;\n","import React, { createContext, useContext, useReducer } from 'react';\nimport { Patient, Diagnosis } from '../types';\n\nimport { Action } from './reducer';\n\nexport type State = {\n  patients: { [id: string]: Patient };\n  diagnoses: { [code: string]: Diagnosis };\n};\n\nconst initialState: State = {\n  patients: {},\n  diagnoses: {},\n};\n\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\n  initialState,\n  () => initialState,\n]);\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children,\n}: StateProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\nexport const useStateValue = () => useContext(StateContext);\n\nexport const setPatientList = (patientList: Patient[]): Action => {\n  return { type: 'SET_PATIENT_LIST', payload: patientList };\n};\n\nexport const addPatient = (patient: Patient): Action => {\n  return { type: 'ADD_PATIENT', payload: patient };\n};\n\nexport const setDiagnosisList = (diagnosisList: Diagnosis[]): Action => {\n  return { type: 'SET_DIAGNOSIS_LIST', payload: diagnosisList };\n};\n","import React from \"react\";\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\nimport { Diagnosis, Gender } from \"../types\";\n\n// structure of a single option\nexport type GenderOption = {\n  value: Gender;\n  label: string;\n};\n\n// props for select field component\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: GenderOption[];\n};\n\nexport const SelectField: React.FC<SelectFieldProps> = ({\n  name,\n  label,\n  options\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} />\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\n/*\n  for exercises 9.24.-\n*/\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField: React.FC<NumberProps> = ({ field, label, min, max }) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type='number' min={min} max={max} />\n\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const DiagnosisSelection = ({\n  diagnoses,\n  setFieldValue,\n  setFieldTouched\n}: {\n  diagnoses: Diagnosis[];\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\n}) => {\n  const field = \"diagnosisCodes\";\n  const onChange = (\n    _event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    setFieldTouched(field, true);\n    setFieldValue(field, data.value);\n  };\n\n  const stateOptions = diagnoses.map(diagnosis => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code\n  }));\n\n  return (\n    <Form.Field>\n      <label>Diagnoses</label>\n      <Dropdown\n        fluid\n        multiple\n        search\n        selection\n        options={stateOptions}\n        onChange={onChange}\n      />\n      <ErrorMessage name={field} />\n    </Form.Field>\n  );\n};\n","import React from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { Field, Formik, Form } from \"formik\";\n\nimport { TextField, SelectField, GenderOption } from \"./FormField\";\nimport { Gender, Patient } from \"../types\";\n\n/*\n * use type Patient, but omit id and entries,\n * because those are irrelevant for new patient object.\n */\nexport type PatientFormValues = Omit<Patient, \"id\" | \"entries\">;\n\ninterface Props {\n  onSubmit: (values: PatientFormValues) => void;\n  onCancel: () => void;\n}\n\nconst genderOptions: GenderOption[] = [\n  { value: Gender.Male, label: \"Male\" },\n  { value: Gender.Female, label: \"Female\" },\n  { value: Gender.Other, label: \"Other\" }\n];\n\nexport const AddPatientForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: \"\",\n        ssn: \"\",\n        dateOfBirth: \"\",\n        occupation: \"\",\n        gender: Gender.Other\n      }}\n      onSubmit={onSubmit}\n      validate={values => {\n        const requiredError = \"Field is required\";\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        if (!values.ssn) {\n          errors.ssn = requiredError;\n        }\n        if (!values.dateOfBirth) {\n          errors.dateOfBirth = requiredError;\n        }\n        if (!values.occupation) {\n          errors.occupation = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className=\"form ui\">\n            <Field\n              label=\"Name\"\n              placeholder=\"Name\"\n              name=\"name\"\n              component={TextField}\n            />\n            <Field\n              label=\"Social Security Number\"\n              placeholder=\"SSN\"\n              name=\"ssn\"\n              component={TextField}\n            />\n            <Field\n              label=\"Date Of Birth\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"dateOfBirth\"\n              component={TextField}\n            />\n            <Field\n              label=\"Occupation\"\n              placeholder=\"Occupation\"\n              name=\"occupation\"\n              component={TextField}\n            />\n            <SelectField\n              label=\"Gender\"\n              name=\"gender\"\n              options={genderOptions}\n            />\n            <Grid>\n              <Grid.Column floated=\"left\" width={5}>\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddPatientForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: PatientFormValues) => void;\n  error?: string;\n}\n\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new patient</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddPatientModal;\n","import React from 'react';\nimport { Rating } from 'semantic-ui-react';\n\ntype BarProps = {\n  rating: number;\n  showText: boolean;\n};\n\nconst HEALTHBAR_TEXTS = [\n  'The patient is in great shape',\n  'The patient has a low risk of getting sick',\n  'The patient has a high risk of getting sick',\n  'The patient has a diagnosed condition',\n];\n\nconst HealthRatingBar = ({ rating, showText }: BarProps) => {\n  return (\n    <div className=\"health-bar\">\n      {<Rating icon=\"heart\" disabled rating={4 - rating} maxRating={4} />}\n      {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\n    </div>\n  );\n};\n\nexport default HealthRatingBar;\n","import React from 'react';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport { Container, Table, Button } from 'semantic-ui-react';\n\nimport { PatientFormValues } from '../AddPatientModal/AddPatientForm';\nimport AddPatientModal from '../AddPatientModal';\nimport { Patient } from '../types';\nimport constants from '../constants';\nimport HealthRatingBar from '../components/HealthRatingBar';\nimport { addPatient, useStateValue } from '../state';\n\nconst PatientListPage: React.FC = () => {\n  const [{ patients }, dispatch] = useStateValue();\n  const history = useHistory();\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewPatient = async (values: PatientFormValues) => {\n    try {\n      const { data: newPatient } = await axios.post<Patient>(\n        `${constants.apiBaseUrl}/patients`,\n        values\n      );\n      dispatch(addPatient(newPatient));\n      closeModal();\n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  const clickHandler = (patient: Patient) => {\n    return () => {\n      history.push(`/patients/${patient.id}`);\n    };\n  };\n\n  return (\n    <div className=\"App\">\n      <Container textAlign=\"center\">\n        <h3>Patient list</h3>\n      </Container>\n      <Table celled selectable>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Gender</Table.HeaderCell>\n            <Table.HeaderCell>Occupation</Table.HeaderCell>\n            <Table.HeaderCell>Health Rating</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {Object.values(patients).map((patient: Patient) => (\n            <Table.Row key={patient.id} onClick={clickHandler(patient)}>\n              <Table.Cell>{patient.name}</Table.Cell>\n              <Table.Cell>{patient.gender}</Table.Cell>\n              <Table.Cell>{patient.occupation}</Table.Cell>\n              <Table.Cell>\n                <HealthRatingBar showText={false} rating={1} />\n              </Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n      <AddPatientModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewPatient}\n        error={error}\n        onClose={closeModal}\n      />\n      <Button onClick={() => openModal()}>Add New Patient</Button>\n    </div>\n  );\n};\n\nexport default PatientListPage;\n","import React from 'react';\nimport { useStateValue } from '../state';\nimport { Icon, Item, Divider } from 'semantic-ui-react';\n\nimport {\n  Entry,\n  HospitalEntry,\n  OccupationalHealthcareEntry,\n  HealthCheckEntry,\n} from '../types';\nimport HealthRatingBar from '../components/HealthRatingBar';\n\nconst HospitalEntryDetails: React.FC<HospitalEntry> = (entry) => {\n  const [{ diagnoses }] = useStateValue();\n  console.log(entry);\n  const diagstr = entry.diagnosisCodes\n    ?.map((code) => `${code} (${diagnoses[code].name})`)\n    .join(', ');\n  return (\n    <Item.Content>\n      <Item.Header as=\"h3\">\n        <Icon name=\"stethoscope\" />\n        {entry.date} Hospital at {entry.specialist}\n      </Item.Header>\n      <Item.Description>\n        <b>Diagnoses:</b> {diagstr}\n      </Item.Description>\n      <Item.Description>\n        <b>Description:</b> {entry.description}\n      </Item.Description>\n      {entry.discharge ? (\n        <Item.Description>\n          <b>Discharged</b> at {entry.discharge.date}:{' '}\n          {entry.discharge.criteria}\n        </Item.Description>\n      ) : null}\n    </Item.Content>\n  );\n};\n\nconst OccupationalHealthcareEntryDetails: React.FC<OccupationalHealthcareEntry> = (\n  entry\n) => {\n  const [{ diagnoses }] = useStateValue();\n  console.log(entry);\n  const diagstr = entry.diagnosisCodes\n    ?.map((code) => `${code} (${diagnoses[code].name})`)\n    .join(', ');\n  return (\n    <Item.Content>\n      <Item.Header as=\"h3\">\n        <Icon name=\"stethoscope\" />\n        {entry.date} Occupational healthcare at {entry.specialist}\n      </Item.Header>\n      {entry.diagnosisCodes ? (\n        <Item.Description>\n          <b>Diagnoses:</b> {diagstr}\n        </Item.Description>\n      ) : null}\n      <Item.Description>\n        <b>Description:</b> {entry.description}{' '}\n        {entry.sickLeave\n          ? `On sick leave from ${entry.sickLeave.startDate} to ${entry.sickLeave.endDate}.`\n          : null}\n      </Item.Description>\n      <Item.Description>\n        <b>Employer:</b> {entry.employerName}\n      </Item.Description>\n    </Item.Content>\n  );\n};\n\nconst HealthCheckEntryDetails: React.FC<HealthCheckEntry> = (entry) => {\n  console.log(entry);\n  return (\n    <Item.Content>\n      <Item.Header as=\"h3\">\n        <Icon name=\"user doctor\" />\n        {entry.date} Health check at {entry.specialist}\n      </Item.Header>\n      <Item.Description>\n        <b>Description:</b> {entry.description}\n      </Item.Description>\n      <Item.Description>\n        <HealthRatingBar rating={entry.healthCheckRating} showText={true} />\n      </Item.Description>\n    </Item.Content>\n  );\n};\n\n/**\n * Helper function for exhaustive type checking\n */\nconst assertNever = (value: never): never => {\n  throw new Error(\n    `Unhandled discriminated union member: ${JSON.stringify(value)}`\n  );\n};\n\nconst EntryDetails: React.FC<Entry> = (entry) => {\n  switch (entry.type) {\n    case 'Hospital':\n      return <HospitalEntryDetails {...entry} />;\n    case 'OccupationalHealthcare':\n      return <OccupationalHealthcareEntryDetails {...entry} />;\n    case 'HealthCheck':\n      return <HealthCheckEntryDetails {...entry} />;\n    default:\n      return assertNever(entry);\n  }\n};\n\nconst Entries: React.FC<{ entries: Entry[] }> = ({ entries }) => {\n  return (\n    <Item.Group>\n      {entries.map((entry: Entry) => (\n        <div key={entry.id}>\n          <Item>\n            <EntryDetails {...entry} />\n          </Item>\n          <Divider />\n        </div>\n      ))}\n    </Item.Group>\n  );\n};\n\nexport default Entries;\n","import React from 'react';\nimport { Field, Formik, Form, FormikProps } from 'formik';\nimport { Button, Grid, Modal, Segment } from 'semantic-ui-react';\nimport {\n  NumberField,\n  TextField,\n  DiagnosisSelection,\n} from '../AddPatientModal/FormField';\nimport {\n  NewHealthCheckEntry,\n  NewHospitalEntry,\n  HealthCheckRating,\n  Diagnosis,\n} from '../types';\nimport { useStateValue } from '../state';\n\ninterface PureHealthCheckFormProps {\n  dirty: boolean;\n  isValid: boolean;\n  onCancel: () => void;\n}\n\ninterface PureHospitalFormProps {\n  dirty: boolean;\n  isValid: boolean;\n  onCancel: () => void;\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>['setFieldValue'];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>['setFieldTouched'];\n  diagnoses: Diagnosis[];\n}\n\nexport const PureHealthCheckForm: React.FC<PureHealthCheckFormProps> = ({\n  dirty,\n  isValid,\n  onCancel,\n}) => (\n  <Form className=\"form ui\">\n    <Field\n      label=\"Date\"\n      placeholder=\"YYYY-MM-DD\"\n      name=\"date\"\n      component={TextField}\n    />\n    <Field\n      label=\"Description\"\n      placeholder=\"Description\"\n      name=\"description\"\n      component={TextField}\n    />\n    <Field\n      label=\"Health check rating\"\n      name=\"healthCheckRating\"\n      min={0}\n      max={3}\n      component={NumberField}\n    />\n    <Field\n      label=\"Specialist\"\n      placeholder=\"Specialist\"\n      name=\"specialist\"\n      component={TextField}\n    />\n\n    <Grid>\n      <Grid.Column floated=\"left\" width={5}>\n        <Button type=\"button\" onClick={onCancel} color=\"red\">\n          Cancel\n        </Button>\n      </Grid.Column>\n      <Grid.Column floated=\"right\" width={5}>\n        <Button\n          type=\"submit\"\n          floated=\"right\"\n          color=\"green\"\n          disabled={!dirty || !isValid}\n        >\n          Add\n        </Button>\n      </Grid.Column>\n    </Grid>\n  </Form>\n);\n\nexport const PureHospitalForm: React.FC<PureHospitalFormProps> = ({\n  dirty,\n  isValid,\n  onCancel,\n  setFieldValue,\n  setFieldTouched,\n  diagnoses,\n}) => (\n  <Form className=\"form ui\">\n    <Field\n      label=\"Date\"\n      placeholder=\"YYYY-MM-DD\"\n      name=\"date\"\n      component={TextField}\n    />\n    <Field\n      label=\"Description\"\n      placeholder=\"Description\"\n      name=\"description\"\n      component={TextField}\n    />\n    <Field\n      label=\"Specialist\"\n      placeholder=\"Specialist\"\n      name=\"specialist\"\n      component={TextField}\n    />\n    <DiagnosisSelection\n      setFieldValue={setFieldValue}\n      setFieldTouched={setFieldTouched}\n      diagnoses={Object.values(diagnoses)}\n    />\n    <Grid>\n      <Grid.Column floated=\"left\" width={5}>\n        <Button type=\"button\" onClick={onCancel} color=\"red\">\n          Cancel\n        </Button>\n      </Grid.Column>\n      <Grid.Column floated=\"right\" width={5}>\n        <Button\n          type=\"submit\"\n          floated=\"right\"\n          color=\"green\"\n          disabled={!dirty || !isValid}\n        >\n          Add\n        </Button>\n      </Grid.Column>\n    </Grid>\n  </Form>\n);\n\ninterface HealthCheckFormProps {\n  onSubmit: (values: NewHealthCheckEntry) => void;\n  onCancel: () => void;\n}\n\ninterface HospitalFormProps {\n  onSubmit: (values: NewHospitalEntry) => void;\n  onCancel: () => void;\n}\n\nconst getInitialValuesHealthCheck = (): NewHealthCheckEntry => {\n  return {\n    date: new Date().toISOString().slice(0, 10),\n    description: '',\n    healthCheckRating: HealthCheckRating.Healthy,\n    specialist: '',\n    type: 'HealthCheck',\n  };\n};\n\nconst getInitialValuesHospital = (): NewHospitalEntry => {\n  return {\n    date: new Date().toISOString().slice(0, 10),\n    description: '',\n    specialist: '',\n    type: 'Hospital',\n    discharge: {\n      date: new Date().toISOString().slice(0, 10),\n      criteria: '',\n    },\n  };\n};\n\nconst isDate = (date: string): boolean => {\n  return Boolean(Date.parse(date));\n};\n\nconst validateHealthCheckForm = (values: NewHealthCheckEntry) => {\n  const requiredError = 'Field is required';\n  const errors: { [field: string]: string } = {};\n  if (!values.date) {\n    errors.date = requiredError;\n  }\n  if (!values.description) {\n    errors.description = requiredError;\n  }\n  if (!values.healthCheckRating) {\n    errors.healthCheckRating = requiredError;\n  }\n  if (!values.specialist) {\n    errors.specialist = requiredError;\n  }\n  if (values.date && !isDate(values.date)) {\n    errors.date = 'Date must given in form YYYY-MM-DD';\n  }\n  return errors;\n};\n\nconst validateHospitalForm = (values: NewHospitalEntry) => {\n  const requiredError = 'Field is required';\n  const errors: { [field: string]: string } = {};\n  if (!values.date) {\n    errors.date = requiredError;\n  }\n  if (!values.description) {\n    errors.description = requiredError;\n  }\n  if (!values.specialist) {\n    errors.specialist = requiredError;\n  }\n  if (values.date && !isDate(values.date)) {\n    errors.date = 'Date must given in form YYYY-MM-DD';\n  }\n  return errors;\n};\n\nexport const HealthCheckForm: React.FC<HealthCheckFormProps> = ({\n  onSubmit,\n  onCancel,\n}) => {\n  return (\n    <Formik\n      initialValues={getInitialValuesHealthCheck()}\n      onSubmit={onSubmit}\n      validate={validateHealthCheckForm}\n    >\n      {({ isValid, dirty }) => (\n        <PureHealthCheckForm\n          isValid={isValid}\n          dirty={dirty}\n          onCancel={onCancel}\n        />\n      )}\n    </Formik>\n  );\n};\n\nexport const HospitalForm: React.FC<HospitalFormProps> = ({\n  onSubmit,\n  onCancel,\n}) => {\n  const [{ diagnoses }] = useStateValue();\n  return (\n    <Formik\n      initialValues={getInitialValuesHospital()}\n      onSubmit={onSubmit}\n      validate={validateHospitalForm}\n    >\n      {({ isValid, dirty, setFieldValue, setFieldTouched }) => (\n        <PureHospitalForm\n          isValid={isValid}\n          dirty={dirty}\n          onCancel={onCancel}\n          setFieldValue={setFieldValue}\n          setFieldTouched={setFieldTouched}\n          diagnoses={Object.values(diagnoses)}\n        />\n      )}\n    </Formik>\n  );\n};\n\ninterface PatientEntryModalHealthCheckProps {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: NewHealthCheckEntry) => void;\n  error?: string;\n}\n\ninterface PatientEntryModalHospitalProps {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: NewHospitalEntry) => void;\n  error?: string;\n}\n\nexport const AddPatientEntryModalHealthCheck = ({\n  modalOpen,\n  onClose,\n  onSubmit,\n  error,\n}: PatientEntryModalHealthCheckProps) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new entry (health check)</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <HealthCheckForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport const AddPatientEntryModalHospital = ({\n  modalOpen,\n  onClose,\n  onSubmit,\n  error,\n}: PatientEntryModalHospitalProps) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new entry (hospital)</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <HospitalForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n","import React from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { useStateValue, addPatient } from '../state';\nimport { Icon, Header, Loader, Dimmer, Button } from 'semantic-ui-react';\n\nimport constants from '../constants';\nimport { Patient, Gender, Entry, NewEntry } from '../types';\n\nimport Entries from './Entries';\nimport {\n  AddPatientEntryModalHealthCheck,\n  AddPatientEntryModalHospital,\n} from '../AddPatientEntryModal';\n\nconst GenderIcon: React.FC<{ gender: Gender }> = ({ gender }) => {\n  switch (gender) {\n    case 'male':\n      return <Icon name=\"mars\" />;\n    case 'female':\n      return <Icon name=\"venus\" />;\n    case 'other':\n      return <Icon name=\"genderless\" />;\n    default:\n      return <Icon name=\"genderless\" />;\n  }\n};\n\nconst PatientDetailPage: React.FC = () => {\n  const [{ patients }, dispatch] = useStateValue();\n  const { id } = useParams<{ id: string }>();\n  const [modalHealthCheckOpen, setModalHealthCheckOpen] = React.useState<\n    boolean\n  >(false);\n  const [modalHospitalOpen, setModalHospitalOpen] = React.useState<boolean>(\n    false\n  );\n  const [error, setError] = React.useState<string | undefined>();\n\n  // First check do we have patient data, it not, render loading\n  const patient = patients[id];\n  if (!patient) {\n    return (\n      <Dimmer active inverted>\n        <Loader inverted>Loading</Loader>\n      </Dimmer>\n    );\n  }\n\n  const fetchPatientDetails = async (id: string) => {\n    try {\n      const uri = `${constants.apiBaseUrl}/patients/${id}`;\n      const { data: patientDetailsFromApi } = await axios.get<Patient>(uri);\n      // console.log(patientDetailsFromApi);\n      dispatch(addPatient(patientDetailsFromApi));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  if (!patient.ssn) {\n    fetchPatientDetails(id);\n  }\n\n  const openModalHealthCheck = (): void => setModalHealthCheckOpen(true);\n  const openModalHospital = (): void => setModalHospitalOpen(true);\n\n  const closeModal = (): void => {\n    setModalHealthCheckOpen(false);\n    setModalHospitalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewPatientEntry = async (values: NewEntry) => {\n    try {\n      const uri = `${constants.apiBaseUrl}/patients/${id}/entries`;\n      const { data: newEntry } = await axios.post<Entry>(uri, values);\n      patient.entries.push(newEntry);\n      dispatch(addPatient(patient));\n      closeModal();\n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {!patient.ssn ? (\n        <Dimmer active inverted>\n          <Loader inverted>Loading</Loader>\n        </Dimmer>\n      ) : null}\n      <Header as=\"h1\">\n        {patient.name} <GenderIcon gender={patient.gender} />\n      </Header>\n      <div>ssn: {patient.ssn || 'unknown'}</div>\n      <div>occupation: {patient.occupation}</div>\n      <Header as=\"h2\">Entries</Header>\n      {patient.entries ? (\n        <Entries entries={patient.entries} />\n      ) : (\n        'Waiting for data ...'\n      )}\n      <AddPatientEntryModalHealthCheck\n        modalOpen={modalHealthCheckOpen}\n        onSubmit={submitNewPatientEntry}\n        error={error}\n        onClose={closeModal}\n      />\n      <AddPatientEntryModalHospital\n        modalOpen={modalHospitalOpen}\n        onSubmit={submitNewPatientEntry}\n        error={error}\n        onClose={closeModal}\n      />\n      <Button onClick={() => openModalHealthCheck()}>\n        Add new entry (health check)\n      </Button>\n      <Button onClick={() => openModalHospital()}>\n        Add new entry (hospital)\n      </Button>\n    </div>\n  );\n};\n\nexport default PatientDetailPage;\n","import React from 'react';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport { Button, Divider, Header, Container } from 'semantic-ui-react';\n\nimport constants from './constants';\nimport { useStateValue, setPatientList, setDiagnosisList } from './state';\nimport { Patient, Diagnosis } from './types';\n\nimport PatientListPage from './PatientListPage';\nimport PatientDetailPage from './PatientDetailPage';\n\nconst App: React.FC = () => {\n  const [, dispatch] = useStateValue();\n  React.useEffect(() => {\n    axios.get<void>(`${constants.apiBaseUrl}/ping`);\n\n    const fetchPatientList = async () => {\n      try {\n        const uri = `${constants.apiBaseUrl}/patients`;\n        const { data: patientListFromApi } = await axios.get<Patient[]>(uri);\n        dispatch(setPatientList(patientListFromApi));\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    fetchPatientList();\n\n    const fetchDiagnoses = async () => {\n      try {\n        const uri = `${constants.apiBaseUrl}/diagnoses`;\n        const { data: diagnosisListFromApi } = await axios.get<Diagnosis[]>(uri);\n        dispatch(setDiagnosisList(diagnosisListFromApi));\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    fetchDiagnoses();\n\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Container>\n          <Header as=\"h1\">Patientor</Header>\n          <Button as={Link} to=\"/\" primary>\n            Home\n          </Button>\n          <Divider hidden />\n          <Switch>\n            <Route path=\"/patients/:id\">\n              <PatientDetailPage />\n            </Route>\n            <Route path=\"/\">\n              <PatientListPage />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport { reducer, StateProvider } from \"./state\";\n\nReactDOM.render(\n  <StateProvider reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById('root')\n);\n","import { State } from './state';\nimport { Patient, Diagnosis } from '../types';\n\nexport type Action =\n  | {\n      type: 'SET_PATIENT_LIST';\n      payload: Patient[];\n    }\n  | {\n      type: 'ADD_PATIENT';\n      payload: Patient;\n    }\n  | {\n      type: 'SET_DIAGNOSIS_LIST';\n      payload: Diagnosis[];\n    };\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'SET_PATIENT_LIST':\n      return {\n        ...state,\n        patients: {\n          ...action.payload.reduce(\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\n            {}\n          ),\n          ...state.patients,\n        },\n      };\n\n    case 'ADD_PATIENT':\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: action.payload,\n        },\n      };\n\n    case 'SET_DIAGNOSIS_LIST':\n      return {\n        ...state,\n        diagnoses: {\n          ...action.payload.reduce(\n            (memo, diagnosis) => ({ ...memo, [diagnosis.code]: diagnosis }),\n            {}\n          ),\n          ...state.diagnoses,\n        },\n      };\n\n    default:\n      return state;\n  }\n};\n"],"sourceRoot":""}