{"version":3,"sources":["types.ts","constants.ts","state/state.tsx","AddPatientModal/FormField.tsx","AddPatientModal/AddPatientForm.tsx","AddPatientModal/index.tsx","components/HealthRatingBar.tsx","PatientListPage/index.tsx","PatientDetailPage/Entries.tsx","utils.ts","AddPatientEntryModal/index.tsx","PatientDetailPage/index.tsx","App.tsx","index.tsx","state/reducer.ts"],"names":["Gender","HealthCheckRating","config","apiBaseUrl","initialState","patients","diagnoses","StateContext","createContext","useStateValue","useContext","addPatient","patient","type","payload","SelectField","name","label","options","Form","Field","as","className","map","option","key","value","TextField","field","placeholder","style","color","genderOptions","Male","Female","Other","AddPatientForm","onSubmit","onCancel","initialValues","ssn","dateOfBirth","occupation","gender","validate","values","errors","isValid","dirty","component","Grid","Column","floated","width","Button","onClick","disabled","AddPatientModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","inverted","HEALTHBAR_TEXTS","HealthRatingBar","rating","showText","Rating","icon","maxRating","PatientListPage","dispatch","history","useHistory","React","useState","setModalOpen","setError","closeModal","undefined","clickHandler","push","id","Container","textAlign","Table","celled","selectable","unstackable","Row","HeaderCell","Body","Object","Cell","a","async","axios","post","constants","newPatient","data","console","response","HospitalEntryDetails","entry","diagstr","diagnosisCodes","code","join","Item","Icon","date","specialist","Description","description","discharge","criteria","OccupationalHealthcareEntryDetails","sickLeave","startDate","endDate","employerName","HealthCheckEntryDetails","healthCheckRating","EntryDetails","Error","JSON","stringify","assertNever","Entries","entries","Group","Divider","isDate","Boolean","Date","parse","isEmpty","obj","keys","length","required","includes","dischargeErrors","sickLeaveErrors","toBackend","status","NewEntryForm","props","formik","useFormik","toISOString","slice","Healthy","validateOnChange","validateOnBlur","diagnosis","text","useDiagnoses","json","handleSubmit","Input","onChange","handleChange","inline","control","Radio","checked","Dropdown","fluid","multiple","search","selection","_","setFieldValue","Checkbox","AddPatientEntryModal","GenderIcon","PatientDetailPage","useParams","Dimmer","active","Loader","uri","get","patientDetailsFromApi","fetchPatientDetails","newEntry","App","useEffect","patientListFromApi","fetchPatientList","diagnosisListFromApi","fetchDiagnoses","paddingTop","Link","to","primary","hidden","path","ReactDOM","render","reducer","children","useReducer","state","Provider","action","reduce","memo","document","getElementById"],"mappings":"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","file":"static/js/main.692acf9e.chunk.js","sourcesContent":["export interface Diagnosis {\n  code: string;\n  name: string;\n  latin?: string;\n}\n\nexport enum Gender {\n  Male = 'male',\n  Female = 'female',\n  Other = 'other',\n}\n\nexport interface Patient {\n  id: string;\n  name: string;\n  occupation: string;\n  gender: Gender;\n  ssn?: string;\n  dateOfBirth?: string;\n  entries: Entry[];\n}\n\ninterface BaseEntry {\n  id: string;\n  description: string;\n  date: string;\n  specialist: string;\n  diagnosisCodes?: Array<Diagnosis['code']>;\n}\n\nexport interface HospitalEntry extends BaseEntry {\n  type: 'Hospital';\n  discharge: {\n    date: string;\n    criteria: string;\n  };\n}\n\nexport interface OccupationalHealthcareEntry extends BaseEntry {\n  type: 'OccupationalHealthcare';\n  employerName: string;\n  sickLeave: {\n    startDate: string;\n    endDate: string;\n  };\n}\n\nexport enum HealthCheckRating {\n  'Healthy' = 0,\n  'LowRisk' = 1,\n  'HighRisk' = 2,\n  'CriticalRisk' = 3,\n}\n\nexport interface HealthCheckEntry extends BaseEntry {\n  type: 'HealthCheck';\n  healthCheckRating: HealthCheckRating;\n}\n\nexport type Entry =\n  | HospitalEntry\n  | OccupationalHealthcareEntry\n  | HealthCheckEntry;\n\nexport type NewHospitalEntry = Omit<HospitalEntry, 'id'>;\n\nexport type NewOccupationalHealthcareEntry = Omit<OccupationalHealthcareEntry,'id'>;\n\nexport type NewHealthCheckEntry = Omit<HealthCheckEntry, 'id'>;\n\nexport type NewEntry =\n  | NewHospitalEntry\n  | NewOccupationalHealthcareEntry\n  | NewHealthCheckEntry;\n","declare const process: {\n  env: {\n    NODE_ENV: 'development' | 'production';\n  };\n};\n\nconst prod = {\n  apiBaseUrl: 'https://ahojukka5-patientor-backend.herokuapp.com/api',\n};\n\nconst dev = {\n  apiBaseUrl: 'http://localhost:3001/api',\n};\n\nconst config = process.env.NODE_ENV === 'development' ? dev : prod;\n\nexport default config;\n","import React, { createContext, useContext, useReducer } from 'react';\nimport { Patient, Diagnosis } from '../types';\n\nimport { Action } from './reducer';\n\nexport type State = {\n  patients: { [id: string]: Patient };\n  diagnoses: { [code: string]: Diagnosis };\n};\n\nconst initialState: State = {\n  patients: {},\n  diagnoses: {},\n};\n\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\n  initialState,\n  () => initialState,\n]);\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children,\n}: StateProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\nexport const useStateValue = () => useContext(StateContext);\n\nexport const setPatientList = (patientList: Patient[]): Action => {\n  return { type: 'SET_PATIENT_LIST', payload: patientList };\n};\n\nexport const addPatient = (patient: Patient): Action => {\n  return { type: 'ADD_PATIENT', payload: patient };\n};\n\nexport const setDiagnosisList = (diagnosisList: Diagnosis[]): Action => {\n  return { type: 'SET_DIAGNOSIS_LIST', payload: diagnosisList };\n};\n","import React from \"react\";\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\nimport { Diagnosis, Gender } from \"../types\";\n\n// structure of a single option\nexport type GenderOption = {\n  value: Gender;\n  label: string;\n};\n\n// props for select field component\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: GenderOption[];\n};\n\nexport const SelectField: React.FC<SelectFieldProps> = ({\n  name,\n  label,\n  options\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} />\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\n/*\n  for exercises 9.24.-\n*/\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField: React.FC<NumberProps> = ({ field, label, min, max }) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type='number' min={min} max={max} />\n\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const DiagnosisSelection = ({\n  diagnoses,\n  setFieldValue,\n  setFieldTouched\n}: {\n  diagnoses: Diagnosis[];\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\n}) => {\n  const field = \"diagnosisCodes\";\n  const onChange = (\n    _event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    setFieldTouched(field, true);\n    setFieldValue(field, data.value);\n  };\n\n  const stateOptions = diagnoses.map(diagnosis => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code\n  }));\n\n  return (\n    <Form.Field>\n      <label>Diagnoses</label>\n      <Dropdown\n        fluid\n        multiple\n        search\n        selection\n        options={stateOptions}\n        onChange={onChange}\n      />\n      <ErrorMessage name={field} />\n    </Form.Field>\n  );\n};\n","import React from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { Field, Formik, Form } from \"formik\";\n\nimport { TextField, SelectField, GenderOption } from \"./FormField\";\nimport { Gender, Patient } from \"../types\";\n\n/*\n * use type Patient, but omit id and entries,\n * because those are irrelevant for new patient object.\n */\nexport type PatientFormValues = Omit<Patient, \"id\" | \"entries\">;\n\ninterface Props {\n  onSubmit: (values: PatientFormValues) => void;\n  onCancel: () => void;\n}\n\nconst genderOptions: GenderOption[] = [\n  { value: Gender.Male, label: \"Male\" },\n  { value: Gender.Female, label: \"Female\" },\n  { value: Gender.Other, label: \"Other\" }\n];\n\nexport const AddPatientForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: \"\",\n        ssn: \"\",\n        dateOfBirth: \"\",\n        occupation: \"\",\n        gender: Gender.Other\n      }}\n      onSubmit={onSubmit}\n      validate={values => {\n        const requiredError = \"Field is required\";\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        if (!values.ssn) {\n          errors.ssn = requiredError;\n        }\n        if (!values.dateOfBirth) {\n          errors.dateOfBirth = requiredError;\n        }\n        if (!values.occupation) {\n          errors.occupation = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className=\"form ui\">\n            <Field\n              label=\"Name\"\n              placeholder=\"Name\"\n              name=\"name\"\n              component={TextField}\n            />\n            <Field\n              label=\"Social Security Number\"\n              placeholder=\"SSN\"\n              name=\"ssn\"\n              component={TextField}\n            />\n            <Field\n              label=\"Date Of Birth\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"dateOfBirth\"\n              component={TextField}\n            />\n            <Field\n              label=\"Occupation\"\n              placeholder=\"Occupation\"\n              name=\"occupation\"\n              component={TextField}\n            />\n            <SelectField\n              label=\"Gender\"\n              name=\"gender\"\n              options={genderOptions}\n            />\n            <Grid>\n              <Grid.Column floated=\"left\" width={5}>\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddPatientForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: PatientFormValues) => void;\n  error?: string;\n}\n\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new patient</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddPatientModal;\n","import React from 'react';\nimport { Rating } from 'semantic-ui-react';\n\ntype BarProps = {\n  rating: number;\n  showText: boolean;\n};\n\nconst HEALTHBAR_TEXTS = [\n  'The patient is in great shape',\n  'The patient has a low risk of getting sick',\n  'The patient has a high risk of getting sick',\n  'The patient has a diagnosed condition',\n];\n\nconst HealthRatingBar = ({ rating, showText }: BarProps) => {\n  return (\n    <div className=\"health-bar\">\n      {<Rating icon=\"heart\" disabled rating={4 - rating} maxRating={4} />}\n      {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\n    </div>\n  );\n};\n\nexport default HealthRatingBar;\n","import React from 'react';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport { Container, Table, Button } from 'semantic-ui-react';\n\nimport { PatientFormValues } from '../AddPatientModal/AddPatientForm';\nimport AddPatientModal from '../AddPatientModal';\nimport { Patient } from '../types';\nimport constants from '../constants';\nimport HealthRatingBar from '../components/HealthRatingBar';\nimport { addPatient, useStateValue } from '../state';\n\nconst PatientListPage: React.FC = () => {\n  const [{ patients }, dispatch] = useStateValue();\n  const history = useHistory();\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewPatient = async (values: PatientFormValues) => {\n    try {\n      const { data: newPatient } = await axios.post<Patient>(\n        `${constants.apiBaseUrl}/patients`,\n        values\n      );\n      dispatch(addPatient(newPatient));\n      closeModal();\n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  const clickHandler = (patient: Patient) => {\n    return () => {\n      history.push(`/patients/${patient.id}`);\n    };\n  };\n\n  return (\n    <div className=\"App\">\n      <Container textAlign=\"center\">\n        <h3>Patient list</h3>\n      </Container>\n      <Table celled selectable unstackable>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Gender</Table.HeaderCell>\n            <Table.HeaderCell>Occupation</Table.HeaderCell>\n            <Table.HeaderCell>Health Rating</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {Object.values(patients).map((patient: Patient) => (\n            <Table.Row key={patient.id} onClick={clickHandler(patient)}>\n              <Table.Cell>{patient.name}</Table.Cell>\n              <Table.Cell>{patient.gender}</Table.Cell>\n              <Table.Cell>{patient.occupation}</Table.Cell>\n              <Table.Cell>\n                <HealthRatingBar showText={false} rating={1} />\n              </Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n      <AddPatientModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewPatient}\n        error={error}\n        onClose={closeModal}\n      />\n      <Button onClick={() => openModal()}>Add New Patient</Button>\n    </div>\n  );\n};\n\nexport default PatientListPage;\n","import React from 'react';\nimport { useStateValue } from '../state';\nimport { Icon, Item, Divider } from 'semantic-ui-react';\n\nimport {\n  Entry,\n  HospitalEntry,\n  OccupationalHealthcareEntry,\n  HealthCheckEntry,\n} from '../types';\nimport HealthRatingBar from '../components/HealthRatingBar';\n\nconst HospitalEntryDetails: React.FC<HospitalEntry> = (entry) => {\n  const [{ diagnoses }] = useStateValue();\n  const diagstr = entry.diagnosisCodes\n    ?.map((code) => `${code} (${diagnoses[code].name})`)\n    .join(', ');\n  return (\n    <Item.Content>\n      <Item.Header as=\"h3\">\n        <Icon name=\"stethoscope\" />\n        {entry.date} Hospital at {entry.specialist}\n      </Item.Header>\n      <Item.Description>\n        <b>Diagnoses:</b> {diagstr}\n      </Item.Description>\n      <Item.Description>\n        <b>Description:</b> {entry.description}\n      </Item.Description>\n      {entry.discharge ? (\n        <Item.Description>\n          <b>Discharged</b> at {entry.discharge.date}:{' '}\n          {entry.discharge.criteria}\n        </Item.Description>\n      ) : null}\n    </Item.Content>\n  );\n};\n\nconst OccupationalHealthcareEntryDetails: React.FC<OccupationalHealthcareEntry> = (\n  entry\n) => {\n  const [{ diagnoses }] = useStateValue();\n  const diagstr = entry.diagnosisCodes\n    ?.map((code) => `${code} (${diagnoses[code].name})`)\n    .join(', ');\n  return (\n    <Item.Content>\n      <Item.Header as=\"h3\">\n        <Icon name=\"stethoscope\" />\n        {entry.date} Occupational healthcare at {entry.specialist}\n      </Item.Header>\n      {entry.diagnosisCodes ? (\n        <Item.Description>\n          <b>Diagnoses:</b> {diagstr}\n        </Item.Description>\n      ) : null}\n      <Item.Description>\n        <b>Description:</b> {entry.description}{' '}\n        {entry.sickLeave\n          ? `On sick leave from ${entry.sickLeave.startDate} to ${entry.sickLeave.endDate}.`\n          : null}\n      </Item.Description>\n      <Item.Description>\n        <b>Employer:</b> {entry.employerName}\n      </Item.Description>\n    </Item.Content>\n  );\n};\n\nconst HealthCheckEntryDetails: React.FC<HealthCheckEntry> = (entry) => {\n  return (\n    <Item.Content>\n      <Item.Header as=\"h3\">\n        <Icon name=\"user doctor\" />\n        {entry.date} Health check at {entry.specialist}\n      </Item.Header>\n      <Item.Description>\n        <b>Description:</b> {entry.description}\n      </Item.Description>\n      <Item.Description>\n        <HealthRatingBar rating={entry.healthCheckRating} showText={true} />\n      </Item.Description>\n    </Item.Content>\n  );\n};\n\n/**\n * Helper function for exhaustive type checking\n */\nconst assertNever = (value: never): never => {\n  throw new Error(\n    `Unhandled discriminated union member: ${JSON.stringify(value)}`\n  );\n};\n\nconst EntryDetails: React.FC<Entry> = (entry) => {\n  switch (entry.type) {\n    case 'Hospital':\n      return <HospitalEntryDetails {...entry} />;\n    case 'OccupationalHealthcare':\n      return <OccupationalHealthcareEntryDetails {...entry} />;\n    case 'HealthCheck':\n      return <HealthCheckEntryDetails {...entry} />;\n    default:\n      return assertNever(entry);\n  }\n};\n\nconst Entries: React.FC<{ entries: Entry[] }> = ({ entries }) => {\n  return (\n    <Item.Group>\n      {entries.map((entry: Entry) => (\n        <div key={entry.id}>\n          <Item>\n            <EntryDetails {...entry} />\n          </Item>\n          <Divider />\n        </div>\n      ))}\n    </Item.Group>\n  );\n};\n\nexport default Entries;\n","export const isDate = (date: string): boolean => {\n  return Boolean(Date.parse(date));\n};\n\nexport const isEmpty = (obj: object) => {\n  return Object.keys(obj).length === 0;\n};\n","import { useFormik } from 'formik';\nimport React from 'react';\nimport {\n  Button,\n  Checkbox,\n  Divider,\n  Dropdown,\n  Form,\n  Grid,\n  Header,\n  Modal,\n  Radio,\n  Segment,\n} from 'semantic-ui-react';\nimport { useStateValue } from '../state';\nimport {\n  HealthCheckRating,\n  NewEntry,\n  NewHealthCheckEntry,\n  NewHospitalEntry,\n  NewOccupationalHealthcareEntry,\n} from '../types';\nimport { isDate, isEmpty } from '../utils';\n\ninterface FormValues {\n  date: string;\n  specialist: string;\n  description: string;\n  type: '' | 'HealthCheck' | 'Hospital' | 'OccupationalHealthcare';\n  diagnosisCodes?: string[];\n  healthCheckRating: HealthCheckRating;\n  discharge: {\n    date: string;\n    criteria: string;\n  };\n  employerName: string;\n  sickLeave: {\n    startDate: string;\n    endDate: string;\n  };\n}\n\nconst getInitialValues = (): FormValues => {\n  return {\n    date: new Date().toISOString().slice(0, 10),\n    specialist: '',\n    description: '',\n    type: '',\n    diagnosisCodes: [],\n    healthCheckRating: HealthCheckRating.Healthy,\n    discharge: {\n      date: '',\n      criteria: '',\n    },\n    employerName: '',\n    sickLeave: {\n      startDate: '',\n      endDate: '',\n    },\n  };\n};\n\nconst validate = (values: FormValues) => {\n  const errors: { [field: string]: string | { [field: string]: string } } = {};\n  const required = 'This field is required.';\n\n  // Validations for common fields\n\n  if (!values.date) {\n    errors.date = required;\n  }\n  if (!isDate(values.date)) {\n    errors.date = 'Date is incorrect.';\n  }\n  if (!values.specialist) {\n    errors.specialist = required;\n  }\n  if (!values.description) {\n    errors.description = required;\n  }\n  if (!values.type) {\n    errors.type = 'Choose one of the options.';\n  }\n\n  if (!values.type) {\n    return errors;\n  }\n\n  // Validations for HealthCheck option\n\n  if (values.type === 'HealthCheck') {\n    if (values.healthCheckRating === undefined) {\n      errors.healthCheckRating = required;\n    } else if (\n      !Object.values(HealthCheckRating).includes(values.healthCheckRating)\n    ) {\n      errors.healthCheckRating = 'Rating is incorrect (select 0, 1, 2, 3).';\n    }\n  }\n\n  // Validations for Hospital option\n\n  if (values.type === 'Hospital') {\n    const dischargeErrors: { [field: string]: string } = {};\n    if (!values.discharge.date) {\n      dischargeErrors.date = required;\n    } else {\n      if (!isDate(values.discharge.date)) {\n        dischargeErrors.date = 'Date is incorrect';\n      }\n    }\n    if (!values.discharge.criteria) {\n      dischargeErrors.criteria = required;\n    }\n    if (!isEmpty(dischargeErrors)) {\n      errors.discharge = dischargeErrors;\n    }\n  }\n\n  // Validations for OccupationalHealthcare option\n\n  if (values.type === 'OccupationalHealthcare') {\n    if (!values.employerName) {\n      errors.employerName = required;\n    }\n    const sickLeaveErrors: { [field: string]: string } = {};\n    if (values.sickLeave.startDate && !isDate(values.sickLeave.startDate)) {\n      sickLeaveErrors.startDate = 'Date is incorrect';\n    }\n    if (values.sickLeave.endDate && !isDate(values.sickLeave.endDate)) {\n      sickLeaveErrors.endDate = 'Date is incorrect';\n    }\n    if (!isEmpty(sickLeaveErrors)) {\n      errors.sickLeave = sickLeaveErrors;\n    }\n  }\n\n  return errors;\n};\n\nconst toBackend = (values: FormValues): NewEntry | { status: string } => {\n  const {\n    date,\n    specialist,\n    description,\n    type,\n    diagnosisCodes,\n    healthCheckRating,\n    discharge,\n    employerName,\n    sickLeave,\n  } = values;\n  if (!isEmpty(validate(values)) || type === '') {\n    return { status: 'Form validation failed.' };\n  }\n\n  if (type === 'HealthCheck') {\n    const entry: NewHealthCheckEntry = {\n      type: 'HealthCheck',\n      date,\n      specialist,\n      description,\n      healthCheckRating,\n    };\n    return entry;\n  }\n\n  if (type === 'Hospital') {\n    const entry: NewHospitalEntry = {\n      type: 'Hospital',\n      date,\n      specialist,\n      description,\n      discharge,\n    };\n    if (diagnosisCodes && diagnosisCodes.length !== 0) {\n      entry.diagnosisCodes = diagnosisCodes;\n    }\n    return entry;\n  }\n\n  if (type === 'OccupationalHealthcare') {\n    const entry: NewOccupationalHealthcareEntry = {\n      type: 'OccupationalHealthcare',\n      date,\n      specialist,\n      description,\n      employerName,\n      sickLeave,\n    };\n    if (diagnosisCodes && diagnosisCodes.length !== 0) {\n      entry.diagnosisCodes = diagnosisCodes;\n    }\n    return entry;\n  }\n\n  return { status: 'Multifail, you should ne be here at all.' };\n};\n\nconst useDiagnoses = () => {\n  const [{ diagnoses }] = useStateValue();\n  const stateOptions = Object.values(diagnoses).map((diagnosis) => {\n    return {\n      key: diagnosis.code,\n      text: `${diagnosis.name} (${diagnosis.code})`,\n      value: diagnosis.code,\n    };\n  });\n  return stateOptions;\n};\n\nexport interface FormProps {\n  onSubmit: (values: NewEntry) => void;\n  onCancel: () => void;\n}\n\nexport const NewEntryForm: React.FC<FormProps> = (props) => {\n  const { onCancel } = props;\n  const formik = useFormik({\n    initialValues: getInitialValues(),\n    validate,\n    onSubmit: (values: FormValues) => {\n      const entry = toBackend(values) as NewEntry;\n      props.onSubmit(entry);\n    },\n    validateOnChange: false,\n    validateOnBlur: false,\n  });\n  const diagnoses = useDiagnoses();\n  const json = JSON.stringify(toBackend(formik.values), null, 2);\n\n  return (\n    <Form onSubmit={formik.handleSubmit}>\n      <Header as=\"h4\">General information</Header>\n      <Form.Field required>\n        <label>Date</label>\n        <Form.Input\n          name=\"date\"\n          placeholder=\"YYYY-MM-DD\"\n          onChange={formik.handleChange}\n          value={formik.values.date}\n          error={formik.errors.date}\n        />\n      </Form.Field>\n      <Form.Field required>\n        <label>Specialist</label>\n        <Form.Input\n          name=\"specialist\"\n          placeholder=\"Specialist\"\n          onChange={formik.handleChange}\n          value={formik.values.specialist}\n          error={formik.errors.specialist}\n        />\n      </Form.Field>\n      <Form.Field required>\n        <label>Description</label>\n        <Form.Input\n          name=\"description\"\n          placeholder=\"Description\"\n          onChange={formik.handleChange}\n          value={formik.values.description}\n          error={formik.errors.description}\n        />\n      </Form.Field>\n      <Form.Group inline>\n        <label>Type of visit</label>\n        <Form.Field\n          control={Radio}\n          label=\"Health check\"\n          id=\"HealthCheck\"\n          name=\"type\"\n          value=\"HealthCheck\"\n          onChange={formik.handleChange}\n          checked={formik.values.type === 'HealthCheck'}\n          error={!!formik.errors.type}\n        />\n        <Form.Field\n          control={Radio}\n          label=\"Hospital\"\n          id=\"Hospital\"\n          name=\"type\"\n          value=\"Hospital\"\n          onChange={formik.handleChange}\n          checked={formik.values.type === 'Hospital'}\n          error={!!formik.errors.type}\n        />\n        <Form.Field\n          control={Radio}\n          label=\"Occupational healthcare\"\n          id=\"OccupationalHealthcare\"\n          name=\"type\"\n          value=\"OccupationalHealthcare\"\n          onChange={formik.handleChange}\n          checked={formik.values.type === 'OccupationalHealthcare'}\n          error={formik.errors.type}\n        />\n      </Form.Group>\n      <Divider />\n      {formik.values.type === 'HealthCheck' && (\n        <Form.Field required>\n          <label>Health check rating</label>\n          <Form.Input\n            name=\"healthCheckRating\"\n            type=\"number\"\n            onChange={formik.handleChange}\n            value={formik.values.healthCheckRating}\n            error={formik.errors.healthCheckRating}\n          />\n        </Form.Field>\n      )}\n      {(formik.values.type === 'Hospital' ||\n        formik.values.type === 'OccupationalHealthcare') && (\n        <Form.Field>\n          <label>Diagnoses</label>\n          <Dropdown\n            id=\"diagnosisCodes\"\n            name=\"diagnosisCodes\"\n            fluid\n            multiple\n            search\n            selection\n            options={diagnoses}\n            onChange={(_, data) => {\n              formik.setFieldValue('diagnosisCodes', data.value);\n            }}\n          />\n        </Form.Field>\n      )}\n      {formik.values.type === 'Hospital' && (\n        <>\n          <Header as=\"h4\">Discharge</Header>\n          <Form.Field required>\n            <label>Date</label>\n            <Form.Input\n              name=\"discharge['date']\"\n              placeholder=\"YYYY-MM-DD\"\n              onChange={formik.handleChange}\n              value={formik.values.discharge.date}\n              error={formik.errors.discharge && formik.errors.discharge.date}\n            />\n          </Form.Field>\n          <Form.Field required>\n            <label>Criteria</label>\n            <Form.Input\n              name=\"discharge['criteria']\"\n              placeholder=\"Criteria\"\n              onChange={formik.handleChange}\n              value={formik.values.discharge.criteria}\n              error={\n                formik.errors.discharge && formik.errors.discharge.criteria\n              }\n            />\n          </Form.Field>\n        </>\n      )}\n      {formik.values.type === 'OccupationalHealthcare' && (\n        <>\n          <Form.Field required>\n            <label>Employer</label>\n            <Form.Input\n              name=\"employerName\"\n              placeholder=\"Employer\"\n              onChange={formik.handleChange}\n              value={formik.values.employerName}\n              error={formik.errors.employerName}\n            />\n          </Form.Field>\n          <Form.Field control={Checkbox} label=\"Sick leave\" />\n          <Form.Group inline>\n            <Form.Field required>\n              <label>Start date</label>\n              <Form.Input\n                name=\"sickLeave['startDate']\"\n                placeholder=\"YYYY-MM-DD\"\n                onChange={formik.handleChange}\n                value={formik.values.sickLeave.startDate}\n                error={\n                  formik.errors.sickLeave && formik.errors.sickLeave.startDate\n                }\n              />\n            </Form.Field>\n            <Form.Field required>\n              <label>End date</label>\n              <Form.Input\n                name=\"sickLeave['endDate']\"\n                placeholder=\"YYYY-MM-DD\"\n                onChange={formik.handleChange}\n                value={formik.values.sickLeave.endDate}\n                error={\n                  formik.errors.sickLeave && formik.errors.sickLeave.endDate\n                }\n              />\n            </Form.Field>\n          </Form.Group>\n        </>\n      )}\n      <Divider />\n      The following JSON data will be sent to backend:\n      <Segment>\n        <pre>{json}</pre>\n      </Segment>\n      <Divider />\n      <Grid>\n        <Grid.Column floated=\"left\" width={5}>\n          <Button type=\"button\" color=\"red\" onClick={onCancel}>\n            Cancel\n          </Button>\n        </Grid.Column>\n        <Grid.Column floated=\"right\" width={5}>\n          <Button type=\"submit\" floated=\"right\" color=\"green\">\n            Add\n          </Button>\n        </Grid.Column>\n      </Grid>\n    </Form>\n  );\n};\n\ninterface ModalProps {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: NewEntry) => void;\n  error?: string;\n}\n\nexport const AddPatientEntryModal = ({\n  modalOpen,\n  onSubmit,\n  onClose,\n  error,\n}: ModalProps) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new entry</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <NewEntryForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n","import React from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { useStateValue, addPatient } from '../state';\nimport { Icon, Header, Loader, Dimmer, Button } from 'semantic-ui-react';\n\nimport constants from '../constants';\nimport { Patient, Gender, Entry, NewEntry } from '../types';\n\nimport Entries from './Entries';\nimport { AddPatientEntryModal } from '../AddPatientEntryModal';\n\nconst GenderIcon: React.FC<{ gender: Gender }> = ({ gender }) => {\n  switch (gender) {\n    case 'male':\n      return <Icon name=\"mars\" />;\n    case 'female':\n      return <Icon name=\"venus\" />;\n    case 'other':\n      return <Icon name=\"genderless\" />;\n    default:\n      return <Icon name=\"genderless\" />;\n  }\n};\n\nconst PatientDetailPage: React.FC = () => {\n  const [{ patients }, dispatch] = useStateValue();\n  const { id } = useParams<{ id: string }>();\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  // First check do we have patient data, it not, render loading\n  const patient = patients[id];\n  if (!patient) {\n    return (\n      <Dimmer active inverted>\n        <Loader inverted>Loading</Loader>\n      </Dimmer>\n    );\n  }\n\n  const fetchPatientDetails = async (id: string) => {\n    try {\n      const uri = `${constants.apiBaseUrl}/patients/${id}`;\n      const { data: patientDetailsFromApi } = await axios.get<Patient>(uri);\n      dispatch(addPatient(patientDetailsFromApi));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  if (!patient.ssn) {\n    fetchPatientDetails(id);\n  }\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewPatientEntry = async (values: NewEntry) => {\n    try {\n      const uri = `${constants.apiBaseUrl}/patients/${id}/entries`;\n      const { data: newEntry } = await axios.post<Entry>(uri, values);\n      patient.entries.push(newEntry);\n      dispatch(addPatient(patient));\n      closeModal();\n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {!patient.ssn ? (\n        <Dimmer active inverted>\n          <Loader inverted>Loading</Loader>\n        </Dimmer>\n      ) : null}\n      <Header as=\"h1\">\n        {patient.name} <GenderIcon gender={patient.gender} />\n      </Header>\n      <div>ssn: {patient.ssn || 'unknown'}</div>\n      <div>occupation: {patient.occupation}</div>\n      <Header as=\"h2\">Entries</Header>\n      {patient.entries ? (\n        <Entries entries={patient.entries} />\n      ) : (\n        'Waiting for data ...'\n      )}\n      <AddPatientEntryModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewPatientEntry}\n        error={error}\n        onClose={closeModal}\n      />\n      <Button onClick={() => openModal()}>Add new entry</Button>\n    </div>\n  );\n};\n\nexport default PatientDetailPage;\n","import React from 'react';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport { Button, Divider, Header, Container } from 'semantic-ui-react';\n\nimport constants from './constants';\nimport { useStateValue, setPatientList, setDiagnosisList } from './state';\nimport { Patient, Diagnosis } from './types';\n\nimport PatientListPage from './PatientListPage';\nimport PatientDetailPage from './PatientDetailPage';\n\nconst App: React.FC = () => {\n  const [, dispatch] = useStateValue();\n  React.useEffect(() => {\n    axios.get<void>(`${constants.apiBaseUrl}/ping`);\n\n    const fetchPatientList = async () => {\n      try {\n        const uri = `${constants.apiBaseUrl}/patients`;\n        const { data: patientListFromApi } = await axios.get<Patient[]>(uri);\n        dispatch(setPatientList(patientListFromApi));\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    fetchPatientList();\n\n    const fetchDiagnoses = async () => {\n      try {\n        const uri = `${constants.apiBaseUrl}/diagnoses`;\n        const { data: diagnosisListFromApi } = await axios.get<Diagnosis[]>(\n          uri\n        );\n        dispatch(setDiagnosisList(diagnosisListFromApi));\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    fetchDiagnoses();\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\" style={{ paddingTop: '3em' }}>\n      <Router>\n        <Container text>\n          <Header as=\"h1\">Patientor</Header>\n          <Button as={Link} to=\"/\" primary>\n            Home\n          </Button>\n          <Divider hidden />\n          <Switch>\n            <Route path=\"/patients/:id\">\n              <PatientDetailPage />\n            </Route>\n            <Route path=\"/\">\n              <PatientListPage />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport { reducer, StateProvider } from \"./state\";\n\nReactDOM.render(\n  <StateProvider reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById('root')\n);\n","import { State } from './state';\nimport { Patient, Diagnosis } from '../types';\n\nexport type Action =\n  | {\n      type: 'SET_PATIENT_LIST';\n      payload: Patient[];\n    }\n  | {\n      type: 'ADD_PATIENT';\n      payload: Patient;\n    }\n  | {\n      type: 'SET_DIAGNOSIS_LIST';\n      payload: Diagnosis[];\n    };\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'SET_PATIENT_LIST':\n      return {\n        ...state,\n        patients: {\n          ...action.payload.reduce(\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\n            {}\n          ),\n          ...state.patients,\n        },\n      };\n\n    case 'ADD_PATIENT':\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: action.payload,\n        },\n      };\n\n    case 'SET_DIAGNOSIS_LIST':\n      return {\n        ...state,\n        diagnoses: {\n          ...action.payload.reduce(\n            (memo, diagnosis) => ({ ...memo, [diagnosis.code]: diagnosis }),\n            {}\n          ),\n          ...state.diagnoses,\n        },\n      };\n\n    default:\n      return state;\n  }\n};\n"],"sourceRoot":""}